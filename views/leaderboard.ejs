<% var title = 'Leaderboard' %>
<% include header %>

<div class="container-fluid leaderboard">
    <div class="row">
        <div class="col-xs-9 col-md-5">
            <input class="player-input" type="text" />
        </div>
        <div class="col-xs-3 col-md-2">
            <div class="btn btn-primary player-button" onclick="addPlayer()">Add Player</div>
        </div>
    </div>
    <div class="row player-row">
        <div class="col-xs-6">
            <div class="col-xs-4">
                <div class="btn btn-warning player-button" onclick="get('/extras/donations/-1', updateDonations)">-</div>
            </div>
            <div class="col-xs-4 text text-center">
                <span style="font-size: 0.5em;">Don:</span> <span id="donations">0</span>
            </div>
            <div class="col-xs-4">
                <div class="btn btn-primary player-button" onclick="get('/extras/donations/1', updateDonations)">-</div>
            </div>
        </div>
        <div class="col-xs-6">
            <div class="col-xs-4">
                <div class="btn btn-warning player-button" onclick="get('/extras/drinks/-1', updateDrinks)">-</div>
            </div>
            <div class="col-xs-4 text text-center">
                <span style="font-size: 0.5em;">Dri:</span> <span id="drinks">0</span>
            </div>
            <div class="col-xs-4">
                <div class="btn btn-primary player-button" onclick="get('/extras/drinks/1', updateDrinks)">-</div>
            </div>
        </div>
    </div>
    <div class="filter-container">
        <div class="btn" data-filter="recent" data-color="rgb(0, 67, 219)" onclick="changeFilterMode(this)">Recent</div>
        <div class="btn" data-filter="top" data-color="rgb(0, 189, 219)" onclick="changeFilterMode(this)">Leaders</div>
        <div class="btn" data-filter="abc" data-color="rgb(228, 8, 211)" onclick="changeFilterMode(this)">Alphabetical</div>
    </div>
    <div id="player-container">
    </div>
</div>

<script id="player-template" type="text/template">
    <div class="row player-row data-uuid="<$= player.uuid $>">
        <div class="col-xs-2 col-md-2">
            <button class="btn btn-warning primary-button" onclick="get('/player/<$= player.uuid $>/points/-1', update)">-</button>
        </div>
        <div class="col-xs-7 col-md-7 text text-center" style="-webkit-text-stroke-color: hsl(<$= player.hue $>, 100%, 75%);">
            <$= player.name $>
        </div>
        <div class="col-xs-1 col-md-1 text text-center" style="-webkit-text-stroke-color: hsl(<$= player.hue $>, 100%, 75%);">
            <$= player.points $>
        </div>
        <div class="col-xs-2 col-md-2">
            <button class="btn btn-primary primary-button" onclick="get('/player/<$= player.uuid $>/points/1', update)">+</button>
        </div>
    </div>
</script>

<script src="js/ejs.min.js"></script>
<script>
var playerContainer = document.querySelector('#player-container')
var playerTemplate = document.querySelector('#player-template').innerHTML.trim()
var donations = document.querySelector('#donations');
var drinks = document.querySelector('#drinks');

var players = []

function renderPlayer(player) {
    var html = ejs.render(playerTemplate, {player}, {delimiter: '$'})
    var div = document.createElement('div')
    div.innerHTML = html
    var newNode = div.firstChild
    return newNode
}

function renderPlayers() {
    // filter and sort
    var filteredPlayers = filters[currentFilter].items
    // render nodes
    var nodes = filteredPlayers.map(player => {
        var existingNode = document.querySelector('[data-uuid="' + player.uuid + '"]')
        if (player.dirty) {
            if (existingNode) {
                existingNode.remove()
            }
            existingNode = null
            player.dirty = false
        }
        return existingNode || renderPlayer(player)
    })
    // hide old nodes
    Array.from(playerContainer.children).forEach(node => node.style.display = 'none')
    // add new nodes
    nodes.forEach(node => {
        node.style.display = 'block'
        node.remove()
        playerContainer.append(node)
    })
}

function updatePlayer(uuid) {
    get('/player/' + uuid, xhr => {
        renderPlayer(JSON.parse(xhr.responseText))
    })
}

// add player
var addPlayerInput = document.querySelector('.player-input')

function addPlayer() {
    if (!addPlayerInput.value)  {
        return
    }
    get('/player/' + addPlayerInput.value, xhr => {
        addPlayerInput.value = ''
        changeFilterMode(filterPickers[0])
        update()
    })
}

// filter setup
var filters = {
    // sorted by last updated
    recent: {
        filter: item => true,
        sort: (item1, item2) => item2.meta.updated - item1.meta.updated,
        items: [],
    },
    // sorted by points, then by created time
    top: {
        filter: item => true,
        sort: (item1, item2) => (item2.points - item1.points) != 0 ? item2.points - item1.points : item1.meta.created - item2.meta.created,
        items: [],
    },
    // sorted alphabetically by name
    abc: {
        filter: item => true,
        sort: (item1, item2) => item1.name.localeCompare(item2.name),
        items: [],
    },
}
var currentFilter = 'recent'

function updateLists() {
    for (var filterType in filters) {
        var filterObj = filters[filterType]
        filterObj.items = players.filter(filterObj.filter)
        filterObj.items.sort(filterObj.sort)
    }
}

function changeFilterMode(filterPicker) {
    currentFilter = filterPicker.dataset.filter
    // set buttons
    filterPickers.forEach(picker => { picker.style.opacity = 0.5; picker.style.flexGrow = 1 })
    filterPicker.style.opacity = 1
    filterPicker.style.flexGrow = 2
    // rerender
    renderPlayers()
}
var filterPickers = Array.from(document.querySelectorAll('[data-filter]'))
filterPickers.forEach(picker => picker.style.backgroundColor = picker.dataset.color)
changeFilterMode(filterPickers[0])

// update
var lastUpdateTime = 0
function update() {
    get('/playerupdates/' + lastUpdateTime, xhr => {
        var response = JSON.parse(xhr.responseText)
        lastUpdateTime = response.time
        // apply updates to collection
        response.players.forEach(player => {
            player.dirty = true
            for (var i = 0; i < players.length; i++) {
                if (players[i].uuid == player.uuid) {
                    players[i] = player
                    return
                }
            }
            players.push(player)
        })
        // update lists
        updateLists()
        // render
        if (response.players.length) {
            renderPlayers()
        }
    })
}
function updateDonations() {
    get('/extras/donations', xhr => {
        var response = JSON.parse(xhr.responseText)
        donations.textContent = response.value
    })
}
function updateDrinks() {
    get('/extras/drinks', xhr => {
        var response = JSON.parse(xhr.responseText)
        drinks.textContent = response.value
    })
}

// initial pull
document.addEventListener('DOMContentLoaded', () => {
    update();
    updateDonations();
    updateDrinks();
}, false)
</script>

<% include footer %>